// database configuration 

generator client {
    output        = "./client"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
    provider      = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

enum IdType {
    STRING
    INT
}

enum EmailStatus {
    SENT
    NOT_SENT
    PENDING
    SENDING
}

model Email {
    EmailId               Int          @id @default(autoincrement())
    from                  String
    to                    String
    cc                    String?
    subject               String?
    emailText             String?
    templatePath          String?
    emailHtmlFileFullPath String?
    status                EmailStatus? @default(PENDING)

    @@index([from])
    @@index([to])
    @@index([subject])
    @@index([status])
}

// basic functioning -- jobs

enum JobStatus {
    DONE
    PENDING
    FAILED
}

enum JobHandlerType {
    HANDLER_NAME
    FUNCTION_STRING
}

model Job {
    jobId          Int            @id @default(autoincrement())
    title          String?
    handler        String
    handlerType    JobHandlerType @default(HANDLER_NAME)
    argumentJson   String?
    designatedDate DateTime
    cronSchedule   String?
    repeatCount    Int?           @default(-1)
    status         JobStatus      @default(PENDING)
    output         String?

    @@index([title])
    @@index([handlerType])
    @@index([designatedDate])
    @@index([cronSchedule])
    @@index([repeatCount])
    @@index([status])
}

// basic functioning -- files
model File {
    fileId              Int                 @id @default(autoincrement())
    name                String
    mimetype            String
    size                Int
    path                String
    commentsAttachments CommentAttachment[]

    @@index([name])
    @@index([mimetype])
    @@index([path])
}

model CommentAttachment {
    attachmentId     Int @id @default(autoincrement())
    commentId        Int
    attachmentFileId Int

    comment Comments @relation(fields: [commentId], references: [commentId])
    file    File     @relation(fields: [attachmentFileId], references: [fileId])

    @@index([commentId], map: "commentId")
}

model Comments {
    commentId       Int     @id @default(autoincrement())
    commentText     String?
    commentSource   String
    commentSourceId Int?
    byUser          Int?
    byUsername      String?

    commentedByUser User? @relation("commentsByUserToUser", fields: [byUser], references: [userId])

    CommentAttachment CommentAttachment[]

    @@index([byUser], map: "byUser")
}

// basic functioning -- notifications
model Device {
    deviceId    Int    @id @default(autoincrement())
    deviceToken String

    userId Int?
    user   User? @relation("userDevices", fields: [userId], references: [userId])

    notificationTokens NotificationToken[]

    @@index([deviceToken])
    @@index([userId], map: "userId")
}

model NotificationToken {
    notificationTokenId Int @id @default(autoincrement())

    token String?

    deviceId Int?
    device   Device? @relation(fields: [deviceId], references: [deviceId])

    @@index([token])
    @@index([deviceId])
}

model Notification {
    notificationId Int @id @default(autoincrement())

    notificationTokensId String

    dataJson         String?
    notificationJson String?
}

// basic functioning -- logging

model Log {
    logId   Int     @id @default(autoincrement())
    level   Int
    title   String?
    logText String?
    source  String?

    logLevel LogLevel @relation(fields: [level], references: [levelId])

    @@index([level])
    @@index([title])
    @@index([level], map: "level")
}

model LogLevel {
    levelId     Int     @id @default(autoincrement())
    name        String
    description String?

    logs Log[]
}

// basic functioning -- user module
enum UserType {
    ADMIN
    OTHER
    SYSTEM
}

model User {
    userId Int @id @default(autoincrement())

    lastOnline  DateTime? @updatedAt
    lastOffline DateTime? @updatedAt

    archived Boolean @default(false)
    active   Boolean @default(true)

    // identifier
    fullName String

    // credential 
    username String
    password String

    // contacts 
    unverifiedEmail String?
    email           String?

    unverifiedPhone String?
    phone           String?

    userType UserType

    // address  
    regionId     Int?
    region       Region? @relation("regionToUserRegion", fields: [regionId], references: [regionId], onDelete: NoAction, onUpdate: NoAction)
    nearestPoint String?

    // normal relations 
    comments Comments[] @relation("commentsByUserToUser")
    devices  Device[]   @relation("userDevices")
    userLogs UserLog[]  @relation("userLogs")

    // authorities 
    userAuthorities     UserAuthority[] @relation("userAuthorities")
    defaultHomePageName String?

    // authorization profile  
    authorizationProfileId Int?
    authorizationProfile   AuthoritiesProfile? @relation("authorizationProfileUsers", fields: [authorizationProfileId], references: [profileId])

    // notifications
    notifications UserNotification[]

    @@index([active])
    @@index([username])
    @@index([regionId])
    @@index([authorizationProfileId])
}

model UserNotification {
    notificationId Int @id @default(autoincrement())

    title    String?
    contents String?
    read     Boolean @default(false)

    userId Int
    user   User @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

    notificationResourceId Int?
    notificationResource   NotificationResource? @relation("notificationInstanceResource", references: [resourceId], fields: [notificationResourceId])

    tags UserNotificationTag[] @relation("notificationTags")

    @@index([userId])
}

model NotificationResource {
    resourceId Int @id @default(autoincrement())

    title    String
    contents String
    tags     UserNotificationTag[] @relation("notificationResourceTags")

    usersNotifications UserNotification[] @relation("notificationInstanceResource")
}

model UserNotificationTag {
    relationId Int @id @default(autoincrement())

    tagId Int?
    tag   NotificationTag? @relation("usersNotifications", references: [tagId], fields: [tagId])

    notificationId Int?
    notification   UserNotification? @relation("notificationTags", references: [notificationId], fields: [notificationId])

    notificationResourceId Int?
    notificationResource   NotificationResource? @relation("notificationResourceTags", references: [resourceId], fields: [notificationResourceId])

    @@index([notificationId])
    @@index([notificationResourceId])
    @@index([tagId])
}

model NotificationTag {
    tagId Int     @id @default(autoincrement())
    color String?

    label String?

    usersNotifications UserNotificationTag[] @relation("usersNotifications")
}

model UserAuthority {
    authorityId Int @id @default(autoincrement())

    keyName String

    userId Int?
    user   User? @relation("userAuthorities", references: [userId], fields: [userId])

    all Boolean @default(true)

    dynamicAuthorities UserDynamicAuthority[] @relation("dynamicAuthorities")

    @@index([keyName])
    @@index([userId])
}

model UserDynamicAuthority {
    dynamicAuthorityId Int @id @default(autoincrement())

    dynamicAuthorityKey String

    all Boolean @default(true)

    authorityId Int?
    authority   UserAuthority? @relation("dynamicAuthorities", references: [authorityId], fields: [authorityId])

    dynamicAuthorityValues UserDynamicAuthorityValue[] @relation("dynamicAuthorityValues")

    @@index([dynamicAuthorityKey])
    @@index([authorityId])
}

model UserDynamicAuthorityValue {
    valueId Int    @id @default(autoincrement())
    value   String

    dynamicAuthorityId Int?
    dynamicAuthority   UserDynamicAuthority? @relation("dynamicAuthorityValues", references: [dynamicAuthorityId], fields: [dynamicAuthorityId])

    @@index([dynamicAuthorityId])
}

model AuthoritiesProfile {
    profileId   Int     @id @default(autoincrement())
    name        String
    description String?

    defaultHomePageName String?

    profileAuthorities ProfileAuthority[] @relation("AuthoritiesProfileAuthorities")

    users User[] @relation("authorizationProfileUsers")
}

model ProfileAuthority {
    authorityId Int @id @default(autoincrement())

    keyName String

    profileId Int?
    profile   AuthoritiesProfile? @relation("AuthoritiesProfileAuthorities", references: [profileId], fields: [profileId])

    all Boolean @default(true)

    dynamicAuthorities ProfileDynamicAuthority[] @relation("dynamicAuthorities")

    @@index([keyName])
    @@index([profileId])
}

model ProfileDynamicAuthority {
    dynamicAuthorityId Int @id @default(autoincrement())

    dynamicAuthorityKey String

    all Boolean @default(true)

    authorityId Int?
    authority   ProfileAuthority? @relation("dynamicAuthorities", references: [authorityId], fields: [authorityId])

    dynamicAuthorityValues ProfileDynamicAuthorityValue[] @relation("dynamicAuthorityValues")

    @@index([dynamicAuthorityKey])
    @@index([authorityId])
}

model ProfileDynamicAuthorityValue {
    valueId Int    @id @default(autoincrement())
    value   String

    dynamicAuthorityId Int?
    dynamicAuthority   ProfileDynamicAuthority? @relation("dynamicAuthorityValues", references: [dynamicAuthorityId], fields: [dynamicAuthorityId])

    @@index([dynamicAuthorityId])
}

model UserLog {
    logId Int @id @default(autoincrement())

    userId Int?
    user   User? @relation("userLogs", references: [userId], fields: [userId])

    summary      String?
    titleDisplay String?
    title        String?

    // model that relates to the log 
    model    String?
    modelKey String?
    modelId  Int?

    variables String?

    @@index([userId])
}

// basic functioning -- user -- authorities

// basic functioning -- addressing

model Country {
    countryId   Int     @id @default(autoincrement())
    name        String
    description String?

    cities City[]
}

model City {
    cityId      Int     @id @default(autoincrement())
    countryId   Int
    name        String
    description String?

    country Country @relation(fields: [countryId], references: [countryId])

    Region Region[]

    @@index([countryId], map: "countryId")
}

model Region {
    regionId Int    @id @default(autoincrement())
    cityId   Int
    name     String

    city  City   @relation(fields: [cityId], references: [cityId])
    users User[] @relation("regionToUserRegion")

    @@index([cityId], map: "cityId")
}
